
puts(cstr : &[]UByte) : {
    tx.c.puts( cstr );
}

type ~ AType derives Tuple : {
    virtual SFIELD := 41;
    virtual SFIELD2 := 2.72;
    field1 : ~Long;
    field2 : ~Float;

    self() : {
        #init: field1(), field2();
    }

    print() : {
        puts(c"AType");
    }

    method(a : Int)->Int : {
        return a * 2;
    }

    ## overloaded method name:
    ## TODO: Support this. For now, error is generated.

    #experr: multimethod(a : Int)->Int : {
        return Int( a * 3 );
    }
    #experr: multimethod(a : Float)->Int : {
        return Int( a * 3.5 );
    }
}

type ~ BType derives AType : {
    virtual override SFIELD := 42;
    virtual override SFIELD2 := 3.14;
    field1 : ~Long;
    field2 : ~Float;

    override print() : {
        puts(c"BType");
    }

    override method(a : Int)->Int : {
        return super.method( a ) * 2;
    }

    ## currently a warning, not an error:
    ##override bad_method() {}

    b_method() : {}


    ## overriding overloaded method (in reverse order):
    ## TODO: Support this.
    /*
    override multimethod(a : Float)->Int : {
        return super.multimethod( a ) * 2;
    }
    override multimethod(a : Int)->Int : {
        return super.multimethod( a ) * 3;
    }

    #experr: virtual override multimethod : Bool;
    */
}

main()->Int : {
    bo := ~BType( 0, 0 );
    ar : &~AType = &bo;
    br : &~BType = &bo;

    ar.field1 = 1;
    br.field1 = 2;
    assert ar.field1 == 1;
    assert br.field1 == 2;
    assert bo.field1 == 2;

    ar.field1 = 4;
    br.field1 = 8;
    assert ar.field1 == 4;
    assert br.field1 == 8;
    assert bo.field1 == 8;

    assert ar.SFIELD == 42;
    assert br.SFIELD == 42;
    assert bo.SFIELD == 42;
    assert AType.SFIELD == 41;
    assert BType.SFIELD == 42;

    br.b_method();
    #experr: ar.b_method();

    ##ar.print();
    ##br.print();
    vala := ar.method( 2 );
    assert vala == 8;
    valb := br.method( 2 );
    assert valb == 8;
/*
    val := ar.multimethod( 4.0 );
    assert val == 28;
    val := ar.multimethod( 4 );
    assert val == 36;
*/
    return 0;
}
