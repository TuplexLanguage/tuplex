## tests array literals and array allocation and initialization expressions

## functions to pass arrays to so they won't be optimized away for not being used
foofunc( array : &[]UByte ) { }

foofunc( array : &[]Int ) { }

foofunc( array : &[]Long ) { }

foofunc( array : &[]Float ) { }


array_stack_construction( i : UByte ) {
  ## Construction via array literal syntax:
    a0 := [ i, i, i ];
    a1 := [ 1, 2, 3 ];
    a2 := [ Int(1), 2, 3 ];
    #experr 1: ae := [];  ## invalid, no element type info
    assert a0.C == 3;
    assert a0.C == a0.L;
    assert a1.C == a1.L;
    assert a2.C == a2.L;

    ## explicit array type (fully specified or with implicit length) with direct initializer:
    a3 := [3]Int( 1, 2, 3 );
    a4 := [0]Int();           ## empty array of Ints
    a5 := []Int( 1, 2, 3 );
    a6 := []Int();            ## empty array of Ints
    #experr 1: ae := [0]Int( 1, 2, 3 );   ## mismatching number of elements
    #experr 1: ae := [2]Int( 1, 2, 3 );   ## mismatching number of elements
    #experr 1: ae := [i*3]Int( 1, 2, 3 ); ## capacity not statically constant
    #experr 1: ae := [-1]Int( 1, 2, 3 );  ## capacity of wrong type
    #experr 1: ae := [2.5]Int( 1, 2, 3 ); ## capacity of wrong type
    assert a3.C == 3;
    assert a4.C == 0;
    assert a5.C == 3;
    assert a6.C == 0;
    assert a3.C == a3.L;
    assert a4.C == a4.L;
    assert a5.C == a5.L;
    assert a6.C == a6.L;

    ## explicit array type (fully specified or with implicit length) with object initializer:
    a10 := [3]Int( [ 1I, 2, 3 ] );  ## literal array initializer
    a11 := [3]Int( a10 );           ## field initializer
    a12 := [3]Int( &a10 );          ## auto-dereferencing
    a13 := []Int( [ 1I, 2, 3 ] );   ## literal array initializer
    a14 := []Int( a10 );            ## field initializer
    a15 := []Int( &a10 );           ## auto-dereferencing

## TODO: Partial initialization via assignment
    ## a : Array<Int,2> = [ 10I ];

## TODO: initialize from non-array sequences

## TODO: conversions
##    a16 := [3]Long( a6 );  ## safe element-wise conversion
##    a17 := []Long( a6 );   ## safe element-wise conversion

    foofunc( a0 );
    foofunc( a1 );
    foofunc( a2 );
    foofunc( a3 );
    foofunc( a4 );
    foofunc( a5 );
    foofunc( a6 );
    foofunc( a10 );
    foofunc( a11 );
    foofunc( a12 );
    foofunc( a13 );
    foofunc( a14 );
    foofunc( a15 );


  ## Construction via Array type's constructor:
    a20 := <Array<UByte,3>>( [ 1, 2, 3 ] );
    a21 := <Array<Int,3>>( [ 1I, 2, 3 ] );
    a22 := <Array<Int,0>>( []Int() );
    a23 := <Array<Int,0>>();           ## syntactic sugar allows omitting brackets
    a24 := <Array<Int,3>>( 1, 2, 3 );  ## syntactic sugar allows omitting brackets
    #experr 1: ae := <Array<Int,3>>( [ 1.1, 2.2, 3.3 ] );
    assert a21.C == 3;
    assert a22.C == 0;
    assert a23.C == 0;
    assert a24.C == 3;
    assert a21.C == a21.L;
    assert a22.C == a22.L;
    assert a23.C == a23.L;
    assert a24.C == a24.L;

    type MyFA <: Array<Float,3>;
    aa := MyFA( [ 1.1, 2.2, 3.3 ] );
    #experr 1: ae := MyFA( [ 1, 2, 3 ] );

    ## not supported to automatically infer generic type parameters:
    #experr 1: ae := <Array<Int>>( [ 1I, 2, 3 ] );
    #experr 2: ae := <Array>( [ 1I, 2, 3 ] );


  ## Construction of empty arrays with dynamic length:
    a30 := [i*0]Int();
    a31 := [i*3]Int();
    a32 := <Array<Int,(i*0)>>();
    a33 := <Array<Int,(i*3)>>();


  ## Partial initialization via constructor:
    a40 := <Array<Int,(i*3)>>( []Int() );
    a41 := <Array<Int,(i*3)>>( [ 1I ] );
    a42 := <Array<Int,(i*3)>>( [ 1I, 2 ] );
    a43 := MyFA( [ 1.1 ] );
    a44 := MyFA( [ 1.1, 2.2 ] );
    assert a40.C == 3;
    assert a40.L == 0;
    assert a41.C == 3;
    assert a41.L == 1;
    assert a42.C == 3;
    assert a42.L == 2;
    assert a43.C == 3;
    assert a43.L == 1;
    assert a44.C == 3;
    assert a44.L == 2;


## FUTURE: support partial initialization of explicitly typed array literals
## (should be seen as array type conversion constructors)
    ##a45 := [2]Int( [ 10I ] );
    #experr 1: ae := [3]Int( 1 );
    #experr 1: ae := [3]Int( 1, 2 );
    #experr 2: ae := [4]Int( [ 1I, 2, 3 ] );  ## literal array initializer
    #experr 2: ae := [4]Int( a10 );           ## field initializer
    #experr 2: ae := [4]Int( &a10 );          ## auto-dereferencing

  ## Initialization with explicit type; Default initialization
    a60 : [0]UByte;
    a61 : [3]UByte;
    assert a60.C == 0;
    assert a60.L == 0;
    assert a61.C == 3;
    assert a61.L == 0;

    a62 : [3]UByte = [ 1, 2, 3 ];
    a63 : [3]UByte = [ 1, 2 ];
    a64 : [3]UByte = [ 1 ];
    a65 : [3]UByte = []UByte();
    ## ae  : [3]UByte = [ 1, 2, 3, 4 ];  ## raises runtime panic
    assert a62.C == 3;
    assert a62.L == 3;
    assert a63.C == 3;
    assert a63.L == 2;
    assert a64.C == 3;
    assert a64.L == 1;
    assert a65.C == 3;
    assert a65.L == 0;

## TODO: initialization from non-array sequences
}


array_new_construction( i : UByte ) {
  ## Construction via array literal syntax is limited:
    #experr 1: a0 := new [ i, i, i ];
    #experr 1: a1 := new [ 1, 2, 3 ];
    #experr 1: a2 := new [ Int(1), 2, 3 ];
    #experr 1: ae := new [];  ## invalid, no element type info

    a3 := new [3]Int( 1, 2, 3 );
    a4 := new [0]Int();           ## empty array of Ints
  ## not supported to automatically infer array length
    #experr 1: a5 := new []Int( 1, 2, 3 );
    #experr 1: a6 := new []Int();            ## empty array of Ints
    assert a3.C == 3;
    assert a4.C == 0;
    assert a3.C == a3.L;
    assert a4.C == a4.L;

    #experr 0: ae := new [0]Int( 1, 2, 3 );    ## raises runtime panic
    #experr 0: ae := new [2]Int( 1, 2, 3 );    ## raises runtime panic
    #experr 1: ae := new [-1]Int( 1, 2, 3 );   ## capacity of wrong type
    #experr 1: ae := new [2.5]Int( 1, 2, 3 );  ## capacity of wrong type

    ## explicit array type (fully specified or with implicit length) with object initializer:
    a10 := new [3]Int( [ 1I, 2, 3 ] );
    a11 := new [3]Int( a10 );
    a12 := new [3]Int( &a10 );
  ## not supported to automatically infer array length
    #experr 1: a13 := new []Int( [ 1I, 2, 3 ] );
    #experr 1: a14 := new []Int( a10 );
    #experr 1: a15 := new []Int( &a10 );

## TODO: conversions
##    a16 := new [3]Long( a6 );  ## safe element-wise conversion
##    a17 := new []Long( a6 );   ## safe element-wise conversion

    ##foofunc( a3 );
    foofunc( a4 );
    foofunc( a10 );
    foofunc( a11 );


  ## Construction via Array type's constructor:
    a20 := new Array<UByte,3>( [ 1, 2, 3 ] );
    a21 := new Array<Int,3>( [ 1I, 2, 3 ] );
    a22 := new Array<Int,0>( []Int() );
    a23 := new Array<Int,0>();           ## syntactic sugar allows omitting brackets
    a24 := new Array<Int,3>( 1, 2, 3 );  ## syntactic sugar allows omitting brackets
    #experr 1: ae := new Array<Int,3>( [ 1.1, 2.2, 3.3 ] );
    assert a21.C == 3;
    assert a22.C == 0;
    assert a23.C == 0;
    assert a24.C == 3;
    assert a21.C == a21.L;
    assert a22.C == a22.L;
    assert a23.C == a23.L;
    assert a24.C == a24.L;

    type MyFA <: Array<Float,3>;
    aa := new MyFA( [ 1.1, 2.2, 3.3 ] );
    #experr 1: ae := new MyFA( [ 1, 2, 3 ] );

    ## not supported to automatically infer generic type parameters:
    #experr 1: aa := new Array<Int>( [ 1I, 2, 3 ] );
    #experr 1: aa := new Array( [ 1I, 2, 3 ] );


  ## Construction with dynamic Array length:
    a30 := new [i*0]Int();
    a31 := new [i*3]Int();
    a32 := new Array<Int,(i*0)>();
    a33 := new Array<Int,(i*3)>();
    a34 := new [i*3]Int( 1, 2, 3 );


  ## Partial initialization via constructor:
    a40 := new Array<Int,(i*3)>( []Int() );
    a41 := new Array<Int,(i*3)>( [ 1I ] );
    a42 := new Array<Int,(i*3)>( [ 1I, 2 ] );
    a43 := new MyFA( [ 1.1 ] );
    a44 := new MyFA( [ 1.1, 2.2 ] );
    assert a40.C == 3;
    assert a40.L == 0;
    assert a41.C == 3;
    assert a41.L == 1;
    assert a42.C == 3;
    assert a42.L == 2;
    assert a43.C == 3;
    assert a43.L == 1;
    assert a44.C == 3;
    assert a44.L == 2;


  ## Partial initialization via constructor using "explicitly typed array literal syntax":
    a50 := new [3]Int( 1 );
    a51 := new [3]Int( 1, 2 );
    a52 := new [4]Int( [ 1I, 2, 3 ] );  ## literal array initializer
    a53 := new [4]Int( a10 );           ## field initializer
    a54 := new [4]Int( &a10 );          ## auto-dereferencing


  ## Initialization with explicit type
    a62 : &[3]UByte = new Array<UByte,3>( 1, 2, 3 );
    a63 : &[3]UByte = new Array<UByte,3>( 1, 2 );
    a64 : &[3]UByte = new Array<UByte,3>( 1 );
    a65 : &[3]UByte = new Array<UByte,3>();
    ## ae : &[3]UByte = new Array<UByte,3>( 1, 2, 3, 4 );  ## raises runtime panic
    assert a62.C == 3;
    assert a62.L == 3;
    assert a63.C == 3;
    assert a63.L == 2;
    assert a64.C == 3;
    assert a64.L == 1;
    assert a65.C == 3;
    assert a65.L == 0;

## TODO: initialization from non-array sequences
}


nested_array_init() -> Int {
## FUTURE: let assignment statements support implicit initialization of assignee's outer array elements, e.g:
## aaa : ~[4][4][4]UByte;  aaa[0][0][0] = 17;

  ## gradual nested array initialization
    aaa : ~[4][4][4]UByte;
    assert aaa.C == 4;
    assert aaa.L == 0;

    ##aaa[0][0][0] = 3;
    #experr 1: aaa[0] = <Array<Array<Array<UByte,4>,4>,4>>( );
    aaa[0] = <Array<Array<UByte,4>,4>>( <Array<UByte,4>>( 17 ) );

    return 0;
}


main() -> Int {
    i := 1;
    array_stack_construction( i );
    array_new_construction( i );
    nested_array_init();
    return i;
}
