## tests function return statement checking

main()->Int : {
    assert abs1(1) == 1;
    assert abs1(-1) == 1;
    assert abs2(1) == 1;
    assert abs2(-1) == 1;

    assert sign1(0) == 0;
    assert sign1(100) == 1;
    assert sign1(-100) == -1;
    assert sign2(0) == 0;
    assert sign2(100) == 1;
    assert sign2(-100) == -1;
    return 0;
}

pi()->Float : { return 3.14; }

#experr: bad1()->Int : { }
#experr: bad2()->Int : { return; }
#experr: bad3() : { return 1; }
#experr: bad4()->Int : { return 3.14; }

abs1(x : Int)->Int : {
    if x < 0:
        return -x;
    else
        return x;
}

abs2(x : Int)->Int : {
    if x < 0:
        return -x;
    return x;
}

sign1(x : Int)->Int : {
    if x > 0:
        return 1;
    else if x < 0:
        return -1;
    else
        return 0;
}

sign2(x : Int)->Int : {
    if x > 0:
        return 1;
    else if x < 0:
        return -1;
    return 0;
}

sum(x : Int)->Int : {
    sum := ~ 0I;
    xi := ~ x;
    while (TRUE) : {
        if xi <= 0:
            break;
        sum = sum + xi;
        xi = xi - 1;
    }
    return sum;
}


test1(c : Bool)->Int : {
    while c : {
        if c: return 0;
        return 1;
    }
    else
        return 2;
}

#experr:  ## due to the break, proper 'return' is not guaranteed:
test2(c : Bool)->Int : {
    while c : {
        if c: break;
        return 1;
    }
    else
        return 2;
}

test3(c : Bool)->Int : {
    #experr: local_bad1 := ()->Int : { };
    #experr: local_bad2 := ()->Int : { return; };
    #experr: local_bad3 := () : { return 1; };
    #experr: local_bad4 := ()->Int : { return 3.14; };

    if c:
        return 1;
    else
        return 2;
}
