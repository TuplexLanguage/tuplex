module my

## Tests #experr handling in non-generic usage

CONSTANT := 42;

#experr: bad tokens;

#experr: CONSTANT2 : Int = 3.14;  ## bad type conversion

#experr: type BadType1 UnknownType;

#experr 2: type BadType2 derives Tuple : {
    instfield : Float;
    virtual FOO : Int = 2.73;  ## bad type conversion
    virtual BAR := 7  ## missing semicolon
}

#experr 1: type BadType3 derives UnknownType : {
    virtual good := 21;
    virtual found := 22;
}

type OkType derives Tuple : {
    instfield : Float;
    self( f : Float ) : {
        #experr: super();
        #init: instfield( f );
    }
    virtual good := 14;
    #experr 1: virtual FOO : Int = 2.73;  ## bad type conversion
    #experr 1: virtual BAR := 7  ## missing semicolon
    virtual missed := 17;
    virtual found := 18;
}

#experr: bad_func1();

#experr: bad_func2() : {
    return 42;
}

main()->Int : {
    #experr: bad tokens;

    i := ~ 3;

    #experr: i = i + 3 bad tokens;

    #experr: {
        i = i + 3 ## missing semicolon
    }

    #experr: {
        i = i + 3 ## missing semicolon
        i = i + 3;
    }

    #experr 3: {
        i = i + 3 bad tokens;
        i = i + 3.0;  ## bad type conversion
        i = i + 3 ## missing semicolon
    }

    assert i == 3;

    return 0;
}
