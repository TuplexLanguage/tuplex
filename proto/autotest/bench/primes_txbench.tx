
externc alloc_time_point() -> ULong;
externc free_time_point( timePoint : ULong );
externc get_time_diff_nanos( startPoint : ULong ) -> ULong;


main( args: &[]&[]UByte ) {
    print( "Limit\tCount\tMicros" );
    if ( args.L > 1 ) {
/*
        long limit = atol( argv[1] );
        if ( limit > 0 ) {
            void* start = alloc_time_point();
            unsigned long count = prime_sieve( limit );
            uint64_t nanos = get_time_diff_nanos( start );
            free_time_point( start );
            printf( "%lu\t%lu\t%lu\n", limit, count, nanos/1000 );
        }
*/
    }
    else {
        limit : ~ULong = 100;
        for l := ~2; l <= 7; l = l+1 {
            start := alloc_time_point();
            count := prime_sieve( limit );
            micros := get_time_diff_nanos( start )/1000;
            free_time_point( start );
            print( %d limit %% "\t" %d count %% "\t" %d micros );
            limit = limit * 10;
        }
    }
}

prime_sieve( limit : ULong ) -> ULong {
    if (limit / 8 + 1) > UInt.MAX:
        panic "Limit out of range: " %d limit;
    length := UInt( limit / 8 + 1 );
    sieve : &~[]UByte = new ~[length]UByte();

    ## manually set sieve to all ones:
    for i : ~UInt = 0; i < length; i = i+1 :
        sieve[i] = 0xFF;

    ## mark all non-primes:
    for x : ~ULong = 2; x <= limit; x = x+1 {
        for m : ~ULong = x*2; m <= limit; m = m+x {
            i := UInt( m >> 3 );
            b := UByte( m & 7 );
            sieve[i] = sieve[i] & ( ( 1UB << b ) xor 0xFF#UB );
        }
    }

    ## count number of primes:
    count : ~ULong = 0;
    for x : ~ULong = 2; x <= limit; x = x+1 {
        i := UInt( x >> 3 );
        b := UByte( x & 7 );
        if ( sieve[i] & ( 1UB << b ) ) != 0 {
            ##print( "Prime: " %d x );
            count = count + 1;
        }
    }

    ##free( sieve );
    return count;
}
