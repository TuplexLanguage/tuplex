#pragma once

#include "bison_parser.hpp"

typedef yy::TxParser::token_type TxTokenId;
/*
enum class TxTokenId : u_int32_t {
    END = 0,
    ERROR,
    NEWLINE,
    WHITESPACE,
    INDENT,
    DEDENT,
    COMMENT,
    NAME,
    LBRACE,
    RBRACE,
    LPAREN,
    RPAREN,
    SEMICOLON,
    KW_MODULE,
};

TxTokenId::END,
TxTokenId::ERROR,
TxTokenId::INDENT,
TxTokenId::DEDENT,
TxTokenId::NL,
TxTokenId::SEMICOLON,
TxTokenId::DOT,
TxTokenId::COLON,
TxTokenId::COMMA,
TxTokenId::DOTDOT,
TxTokenId::ELLIPSIS,
TxTokenId::ASTERISK,
TxTokenId::PLUS,
TxTokenId::MINUS,
TxTokenId::FSLASH,
TxTokenId::BSLASH,
TxTokenId::AAND,
TxTokenId::PIPE,
TxTokenId::CARET,
TxTokenId::TILDE,
TxTokenId::AT,
TxTokenId::PERCENT,
TxTokenId::DOLLAR,
TxTokenId::EURO,
TxTokenId::LPAREN,
TxTokenId::RPAREN,
TxTokenId::LBRACE,
TxTokenId::RBRACE,
TxTokenId::LBRACKET,
TxTokenId::RBRACKET,
TxTokenId::QMARK,
TxTokenId::EMARK,
TxTokenId::DASHGT,
TxTokenId::LTCOLON,
TxTokenId::COLONGT,
TxTokenId::EQUAL,
TxTokenId::EEQUAL,
TxTokenId::NEQUAL,
TxTokenId::EEEQUAL,
TxTokenId::NEEQUAL,
TxTokenId::LT,
TxTokenId::GT,
TxTokenId::LEQUAL,
TxTokenId::GEQUAL,
TxTokenId::LTLT,
TxTokenId::GTGT,
TxTokenId::GTGTGT,
TxTokenId::COLEQUAL,
TxTokenId::PLUSEQUAL,
TxTokenId::MINUSEQUAL,
TxTokenId::ASTERISKEQUAL,
TxTokenId::FSLASHEQUAL,
TxTokenId::SF_MINUS,
TxTokenId::SF_PLUS,
TxTokenId::SF_SPACE,
TxTokenId::SF_ZERO,
TxTokenId::SF_HASH,
TxTokenId::KW_MODULE,
TxTokenId::KW_IMPORT,
TxTokenId::KW_TYPE,
TxTokenId::KW_INTERFACE,
TxTokenId::KW_BUILTIN,
TxTokenId::KW_VIRTUAL,
TxTokenId::KW_ABSTRACT,
TxTokenId::KW_FINAL,
TxTokenId::KW_OVERRIDE,
TxTokenId::KW_EXTERNC,
TxTokenId::KW_MUTABLE,
TxTokenId::KW_REFERENCE,
TxTokenId::KW_DERIVES,
TxTokenId::KW_WHILE,
TxTokenId::KW_FOR,
TxTokenId::KW_IF,
TxTokenId::KW_ELSE,
TxTokenId::KW_IN,
TxTokenId::KW_IS,
TxTokenId::KW_RETURN,
TxTokenId::KW_BREAK,
TxTokenId::KW_CONTINUE,
TxTokenId::KW_NEW,
TxTokenId::KW_DELETE,
TxTokenId::KW_XOR,
TxTokenId::KW_TRUE,
TxTokenId::KW_FALSE,
TxTokenId::KW_PANIC,
TxTokenId::KW_ASSERT,
TxTokenId::KW_EXPERR,
TxTokenId::KW__ADDRESS,
TxTokenId::KW__TYPEID,
TxTokenId::KW__SIZEOF,
TxTokenId::KW__SUPERTYPES,
TxTokenId::KW_PUBLIC,
TxTokenId::KW_PROTECTED,
TxTokenId::KW_STATIC,
TxTokenId::KW_CONST,
TxTokenId::KW_EXTENDS,
TxTokenId::KW_IMPLEMENTS,
TxTokenId::KW_SWITCH,
TxTokenId::KW_CASE,
TxTokenId::KW_WITH,
TxTokenId::KW_AS,
TxTokenId::KW_AND,
TxTokenId::KW_OR,
TxTokenId::KW_NOT,
TxTokenId::KW_RAISES,
TxTokenId::KW_TRY,
TxTokenId::KW_EXCEPT,
TxTokenId::KW_FINALLY,
TxTokenId::KW_RAISE,
TxTokenId::NAME,
TxTokenId::LIT_DEC_INT,
TxTokenId::LIT_RADIX_INT,
TxTokenId::LIT_FLOATING,
TxTokenId::LIT_CHARACTER,
TxTokenId::LIT_CSTRING,
TxTokenId::LIT_STRING,
TxTokenId::STR_FORMAT,
TxTokenId::SF_PARAM,
TxTokenId::SF_FLAGS,
TxTokenId::SF_WIDTH,
TxTokenId::SF_PREC,
TxTokenId::SF_TYPE,
TxTokenId::HASHINIT,
TxTokenId::HASHSELF,
TxTokenId::STMT,
TxTokenId::TYPE,
TxTokenId::EXPR,
TxTokenId::PERCENTPERCENT,
TxTokenId::STRFORMAT,
TxTokenId::NOT,
TxTokenId::NEG,
TxTokenId::ADDR,
TxTokenId::ARRAY_LIT,
*/


template<typename charT, typename traits>
std::basic_ostream<charT, traits> &
operator<<( std::basic_ostream<charT, traits> &lhs, TxTokenId const &rhs ) {
    return lhs << static_cast<int>( rhs );
}
