# Tuplex source directory cmakelist

# set(CMAKE_BUILD_TYPE "Debug")  # Debug Release RelWithDebInfo MinSizeRel

ADD_CUSTOM_TARGET(debug
  COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Debug ${CMAKE_SOURCE_DIR}
  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all
  COMMENT "Switch CMAKE_BUILD_TYPE to Debug"
  )

ADD_CUSTOM_TARGET(release
  COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Release ${CMAKE_SOURCE_DIR}
  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all
  COMMENT "Switch CMAKE_BUILD_TYPE to Release"
  )


set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


set(GENERATED_OUTPUT_PATH ${CMAKE_BINARY_DIR}/generated)


# configure a header file to pass some of the CMake settings to the source code
configure_file (
  "${CMAKE_CURRENT_SOURCE_DIR}/TuplexConfig.h.in"
  "${GENERATED_OUTPUT_PATH}/TuplexConfig.h"
  )


# add to the search path for include files so that we will find TuplexConfig.h
include_directories("${GENERATED_OUTPUT_PATH}")


# add to the search path for include files so that we will find our own includes
include_directories("${CMAKE_CURRENT_SOURCE_DIR}")


# add the lexer and parser generation
FIND_PACKAGE(BISON REQUIRED)
FIND_PACKAGE(FLEX REQUIRED)

BISON_TARGET(TxParser parser/parser.y ${GENERATED_OUTPUT_PATH}/parser.cpp
	VERBOSE "${GENERATED_OUTPUT_PATH}/grammar_output.txt"
        COMPILE_FLAGS "")
# BISON_${Name}_DEFINED - true is the macro ran successfully
# BISON_${Name}_INPUT - The input source file, an alias for <YaccInput>
# BISON_${Name}_OUTPUT_SOURCE - The source file generated by bison
# BISON_${Name}_OUTPUT_HEADER - The header file generated by bison
# BISON_${Name}_OUTPUTS - The sources files generated by bison
# BISON_${Name}_COMPILE_FLAGS - Options used in the bison command line

FLEX_TARGET(TxLexer parser/lexer.l ${GENERATED_OUTPUT_PATH}/lexer.cpp
       COMPILE_FLAGS "")
#       COMPILE_FLAGS "-d")
# FLEX_${Name}_DEFINED - true is the macro ran successfully
# FLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an alias for FlexOutput
# FLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}

ADD_FLEX_BISON_DEPENDENCY(TxLexer TxParser)


set(LLVM_COMPONENTS core engine interpreter bitwriter)
execute_process(COMMAND llvm-config --includedir OUTPUT_VARIABLE LLVM_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --libdir OUTPUT_VARIABLE LLVM_LIBRARY_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --libs ${LLVM_COMPONENTS} OUTPUT_VARIABLE REQ_LLVM_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --system-libs ${LLVM_COMPONENTS} OUTPUT_VARIABLE REQ_LLVM_SYS_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)

include_directories( ${LLVM_INCLUDE_DIRS} )
link_directories( ${LLVM_LIBRARY_DIRS} )

# disabled this since set wierd flags, e.g. -fno-exceptions, and set it manually instead:
#execute_process(COMMAND llvm-config --cxxflags OUTPUT_VARIABLE LLVM_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
set(LLVM_CXX_FLAGS "-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS")

execute_process(COMMAND llvm-config --ldflags OUTPUT_VARIABLE LLVM_LD_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)


# add the executable
add_executable(txc
    ${FLEX_TxLexer_OUTPUTS}
    ${BISON_TxParser_OUTPUTS}
        util/files_env.cpp
        util/logging.cpp

        identifier.cpp
        tx_operations.cpp
        tx_error.cpp
        llvm_generator.cpp
        llvm_exec.cpp
        parsercontext.cpp
        driver.cpp
        main.cpp

        builtin/builtin_types.cpp

        symbol/symbol.cpp
        symbol/symbol_lookup.cpp
        symbol/type.cpp
        symbol/package.cpp
        symbol/module.cpp
        symbol/declaration.cpp
        symbol/entity.cpp
        symbol/entity_type.cpp
        symbol/qual_type.cpp
        symbol/type_registry.cpp
        symbol/type_codegen.cpp

        ast/lexcontext.cpp
        ast/ast_declpass.cpp
        ast/ast_util.cpp
        ast/ast_node.cpp
        ast/ast_modbase.cpp
        ast/ast_entitydecls.cpp
        ast/ast_entitydefs.cpp
        ast/ast_fielddef_node.cpp
        ast/ast_fielddef_codegen.cpp
        ast/ast_modbase_codegen.cpp
        ast/ast_entitydecls_codegen.cpp

        ast/stmt/ast_assertstmt_node.cpp
        ast/stmt/ast_panicstmt_node.cpp
        ast/stmt/ast_stmts.cpp
        ast/stmt/ast_flow.cpp
        ast/stmt/ast_stmts_codegen.cpp
        ast/stmt/ast_flow_codegen.cpp

        ast/type/ast_typeexpr_node.cpp
        ast/type/ast_types.cpp
        ast/type/ast_types_codegen.cpp

        ast/expr/ast_expr_node.cpp
        ast/expr/ast_exprs.cpp
        ast/expr/ast_field.cpp
        ast/expr/ast_lambda_node.cpp
        ast/expr/ast_conv.cpp
        ast/expr/ast_lit.cpp
        ast/expr/ast_ref.cpp
        ast/expr/ast_array.cpp
        ast/expr/ast_string.cpp
        ast/expr/ast_op_exprs.cpp
        ast/expr/ast_expr_node_codegen.cpp
        ast/expr/ast_exprs_codegen.cpp
        ast/expr/ast_field_codegen.cpp
        ast/expr/ast_lambda_codegen.cpp
        ast/expr/ast_conv_codegen.cpp
        ast/expr/ast_lit_codegen.cpp
        ast/expr/ast_ref_codegen.cpp
        ast/expr/ast_array_codegen.cpp
        ast/expr/ast_string_codegen.cpp
        ast/expr/ast_range_codegen.cpp
        ast/expr/ast_op_exprs_codegen.cpp
        ast/expr/ast_intrinsics_codegen.cpp
        ast/expr/ast_constexpr_codegen.cpp
	)

# add compile flags
# -std=c++11
# -std=c++1y
# -fexceptions -fcxx-exceptions 
# -fprofile-arcs -ftest-coverage
# -Wno-deprecated-register
#SET (CMAKE_C_COMPILER             "/usr/bin/clang")
SET (CMAKE_C_COMPILER             "/usr/bin/gcc")
SET (CMAKE_C_FLAGS                "-Wall -std=c99")
SET (CMAKE_C_FLAGS_DEBUG          "-g -DDEVMODE")
SET (CMAKE_C_FLAGS_MINSIZEREL     "-Os")
SET (CMAKE_C_FLAGS_RELEASE        "-O3")
SET (CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

#SET (CMAKE_CXX_COMPILER             "/usr/bin/clang++")
SET (CMAKE_CXX_COMPILER             "/usr/bin/gcc")
SET (CMAKE_CXX_FLAGS                "-Wall -std=c++11 -pthread")
SET (CMAKE_CXX_FLAGS_DEBUG          "-g -DDEVMODE")
SET (CMAKE_CXX_FLAGS_MINSIZEREL     "-Os")
SET (CMAKE_CXX_FLAGS_RELEASE        "-O3")
SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

set_target_properties(txc PROPERTIES COMPILE_FLAGS "${LLVM_CXX_FLAGS}")
set_target_properties(txc PROPERTIES LINK_FLAGS "${LLVM_LD_FLAGS}")

# when linking with gcc, appending -lstdc++ is required:
target_link_libraries(txc ${REQ_LLVM_LIBRARIES} ${REQ_LLVM_SYS_LIBS} -lstdc++)
