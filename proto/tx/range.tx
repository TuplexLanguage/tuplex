module tx


interface Range< E > <: Indicable< Long, E > {

    abstract override sequencer() -> Ref< ~Iterator<E> >;

    abstract override count() -> Ordinal;

    abstract override has( key : Long ) -> Bool;

    abstract override get( key : Long ) -> E;
}



/** A range between two values of an Enumerable type. */
type ERange< E derives Enumerable > <: Tuple, Range< E >, Stringer {

    /** The ERange iterator. */
    type ~ ERangeIterator <: Tuple, Iterator< E > {
        range   : &ERange<E>;
        nextIndex : ~ULong;

        self( range : &ERange<E> ) {
            self.range = range;
            self.nextIndex = 0;
        }

        override has_next() -> Bool {
            return self.nextIndex < self.range.count();
        }

        override has_prev() -> Bool {
            return self.nextIndex > 0;
        }

        override next() ~ -> E {
            n := self.nextIndex;
            self.nextIndex = self.nextIndex + 1;
            return self.range.get( Long( n ) );
        }

        override prev() ~ -> E  {
            self.nextIndex = self.nextIndex - 1;
            return self.range.get( Long( self.nextIndex ) );
        }
    }

    ## valid indices are all integers between [ 0, _indexLimit )
    _indexLimit : Long;

    start : E;
    limit : E;
    stride : Long;

    self( start : E, limit : E, stride : Long ) {
        if stride == 0:  panic ( "Zero stride in ERange" );
        self.start = start;
        self.limit = limit;
        self.stride = stride;
        self._indexLimit = ( Long( self.limit.ordinal() - self.start.ordinal() )
                             + self.stride - 1 ) / self.stride;
        if self._indexLimit < 0:
            self._indexLimit = 0;
    }

    override sequencer() -> Ref< ~ERangeIterator > {
        return new ~ERangeIterator( self );
    }

    override count() -> Ordinal {
        return Ordinal( self._indexLimit );
    }

    override has( index : Long ) -> Bool {
        if index < 0:
            return -index <= self._indexLimit;
        else
            return index < self._indexLimit;
    }

    override get( index : Long ) -> E {
        ix := ~ index;
        if ix < 0 {
            ix = ix + self._indexLimit;
            if ix < 0:  panic "Invalid range index: " %d index %% " < -" %d self._indexLimit;
        }
        if ix >= self._indexLimit:  panic "Invalid range index: " %d ix %% " >= " %d self._indexLimit;
        return E.value( Ordinal( Long( self.start.ordinal() ) + ix * self.stride ) );
    }

    override string( writer : &~tx.ByteWriter ) {
        ## TODO: Either support duck-typing in generic types or provide "unchecked { ... }" mechanism (or similar)
        ## str := %s self.start %% ".." %s self.stride %% ".." %s self.limit;
        str := "<ERange>";
        str.string( writer );
    }
}
