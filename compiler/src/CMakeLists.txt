# Tuplex source directory cmakelist

cmake_minimum_required (VERSION 3.8)

# these options need to be set before PROJECT keyword (note, undocumented, but widely used)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

project(txc)


set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(TXC_GENERATED_OUTPUT_DIR ${CMAKE_BINARY_DIR}/generated)


# configure a header file to pass some of the CMake settings to the source code
configure_file (
  "${CMAKE_CURRENT_SOURCE_DIR}/TuplexConfig.h.in"
  "${TXC_GENERATED_OUTPUT_DIR}/TuplexConfig.h"
  )


# add to the search path for include files so that we will find TuplexConfig.h
include_directories("${TXC_GENERATED_OUTPUT_DIR}")

# add to the search path for include files so that we will find our own includes
include_directories("${CMAKE_CURRENT_SOURCE_DIR}")


# add the lexer and parser generation
FIND_PACKAGE(BISON REQUIRED)

BISON_TARGET(TxParser parser/parser.y ${TXC_GENERATED_OUTPUT_DIR}/bison_parser.cpp
	VERBOSE "${TXC_GENERATED_OUTPUT_DIR}/grammar_output.txt"
        COMPILE_FLAGS "")
# BISON_${Name}_DEFINED - true is the macro ran successfully
# BISON_${Name}_INPUT - The input source file, an alias for <YaccInput>
# BISON_${Name}_OUTPUT_SOURCE - The source file generated by bison
# BISON_${Name}_OUTPUT_HEADER - The header file generated by bison
# BISON_${Name}_OUTPUTS - The sources files generated by bison
# BISON_${Name}_COMPILE_FLAGS - Options used in the bison command line


# Since CLion can't source .profile or similar to get proper paths
set(LLVM_CFG_CMD "/usr/lib/llvm-11/bin/llvm-config")  # "llvm-config"
#set(LLVM_CFG_CMD "llvm-config")

set(LLVM_COMPONENTS core engine interpreter bitwriter)
execute_process(COMMAND ${LLVM_CFG_CMD} --libs ${LLVM_COMPONENTS} OUTPUT_VARIABLE REQ_LLVM_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND ${LLVM_CFG_CMD} --system-libs ${LLVM_COMPONENTS} OUTPUT_VARIABLE REQ_LLVM_SYS_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND ${LLVM_CFG_CMD} --ldflags OUTPUT_VARIABLE LLVM_LD_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND ${LLVM_CFG_CMD} --cxxflags OUTPUT_VARIABLE LLVM_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)

message( "LLVM CXX flags '" ${LLVM_CXX_FLAGS} "'" )
message( "LLVM LD flags '" ${LLVM_LD_FLAGS} "'" )



# add the executable
add_executable(txc
    ${BISON_TxParser_OUTPUTS}
        util/files_env.cpp
        util/logging.cpp

		txparser/scanner.cpp
		txparser/tx_tokens.cpp
        txparser/bison_tx_parser_facade.cpp

        identifier.cpp
        tx_operations.cpp
        tx_error.cpp
        llvm_generator.cpp
        llvm_exec.cpp
        parsercontext.cpp
        driver.cpp
        main.cpp

        builtin/builtin_types.cpp

        symbol/symbol.cpp
        symbol/symbol_lookup.cpp
        symbol/type.cpp
        symbol/type_class_handler.cpp
        symbol/type_codegen.cpp
        symbol/package.cpp
        symbol/module.cpp
        symbol/declaration.cpp
        symbol/entity.cpp
        symbol/qual_type.cpp
        symbol/type_registry.cpp

        ast/lexcontext.cpp
        ast/ast_declpass.cpp
        ast/ast_util.cpp
        ast/ast_node.cpp
        ast/ast_modbase.cpp
        ast/ast_entitydecls.cpp
        ast/ast_entitydefs.cpp
        ast/ast_fielddef_node.cpp
        ast/ast_fielddef_codegen.cpp
        ast/ast_modbase_codegen.cpp
        ast/ast_entitydecls_codegen.cpp

        ast/stmt/ast_assertstmt_node.cpp
        ast/stmt/ast_panicstmt_node.cpp
        ast/stmt/ast_stmts.cpp
        ast/stmt/ast_flow.cpp
        ast/stmt/ast_stmts_codegen.cpp
        ast/stmt/ast_flow_codegen.cpp

        ast/type/ast_typeexpr_node.cpp
        ast/type/ast_typecreating_node.cpp
        ast/type/ast_types.cpp
        ast/type/ast_types_codegen.cpp
        ast/type/ast_qualtypes.cpp

        ast/expr/ast_expr_node.cpp
        ast/expr/ast_exprs.cpp
        ast/expr/ast_field.cpp
        ast/expr/ast_lambda_node.cpp
        ast/expr/ast_conv.cpp
        ast/expr/ast_lit.cpp
        ast/expr/ast_ref.cpp
        ast/expr/ast_array.cpp
        ast/expr/ast_string.cpp
        ast/expr/ast_op_exprs.cpp
        ast/expr/ast_expr_node_codegen.cpp
        ast/expr/ast_exprs_codegen.cpp
        ast/expr/ast_field_codegen.cpp
        ast/expr/ast_lambda_codegen.cpp
        ast/expr/ast_conv_codegen.cpp
        ast/expr/ast_lit_codegen.cpp
        ast/expr/ast_ref_codegen.cpp
        ast/expr/ast_array_codegen.cpp
        ast/expr/ast_string_codegen.cpp
        ast/expr/ast_range_codegen.cpp
        ast/expr/ast_op_exprs_codegen.cpp
        ast/expr/ast_intrinsics_codegen.cpp
        ast/expr/ast_constexpr_codegen.cpp
        parser/tx_scanner_adapter.cpp txparser/tx_tokens.hpp txparser/tx_tokens.cpp)

target_compile_features(txc PUBLIC cxx_std_17)

target_compile_options(txc PUBLIC "SHELL:${LLVM_CXX_FLAGS} -fexceptions")  # (exceptions disabled by LLVM flags)
target_compile_options(txc PUBLIC "-Wno-unknown-pragmas")

target_link_options(txc PUBLIC "SHELL:${LLVM_LD_FLAGS}")

target_link_libraries(txc ${REQ_LLVM_LIBRARIES} ${REQ_LLVM_SYS_LIBS})
