
for_loops( var : UInt )->Int :
    strA := c"123456"
    strB := c"abcdefghij"

    expect : [20]UByte = c"1a2b3c4d5e6f\0g"
    str := ~[20]UByte()
    for ix := ~0; ix < strA.L; ix = ix + 1 :
        str.add( strA[ix] )
        str.add( strB[ix] )
    str.add( 0 )
    assert str.C == expect.C
    assert str.L == expect.L
    assert str == expect

    expect : [20]UByte = c"1a2b3c4d5e6f\0g"
    str := ~[20]UByte()
    for chA, iterA in strA,
        chB, iterB in strB :
        str.add( chA )
        str.add( chB )
        if chA == 'b':
            iterA.next()
    str.add( 0 )
    assert str.C == expect.C
    assert str.L == expect.L
    assert str == expect
##    tx.c.puts( str )
##    tx.c.puts( expect )
##    print( "str.L=" %d str.L %% "  expect.L=" %d expect.L )
##    for ix := ~0; ix < str.L; ix = ix + 1 :
##        print( "ix=" %d ix %% "  " %d str[ix] %% "  " %d expect[ix] )
##        assert str[ix] == expect[ix]

    ##tx.c.puts( c"0 - 9" )
    expect := ~1I
    for i in 1..11 :
        assert i == expect
        expect = expect + 1

    ##tx.c.puts( c"9 - 1:" )
    expect = 9I
    for i in 9..-1..0 :
        assert i == expect
        expect = expect - 1

    ##tx.c.puts( c"parallell iteration, shortest of 1 - 19 and 9 - 1 with step 2:" )
    expectI := ~1I
    expectJ := ~9I
    for i in 1..2..21,
        j in 9..-2..0 :
        assert i == expectI
        assert j == expectJ
        expectI = expectI + 2
        expectJ = expectJ - 2

    ## test empty ranges:
    expect = ~1I
    for i in 1..1 :
        expect = expect + 1
    assert expect == 1

    ##tx.c.puts( c"9 - 1:" )
    expect = 9I
    for i in 9..-1..9 :
        expect = expect - 1
    assert expect == 9

    ##tx.c.puts( c"parallell iteration, shortest of 1 - 19 and 9 - 1 with step 2:" )
    expectI := ~1I
    expectJ := ~9I
    for i in 1..2..1,
        j in 9..-2..0 :
        expectI = expectI + 2
        expectJ = expectJ - 2
    assert expectI == 1
    assert expectJ == 9

    return 0


main() -> Int :
    n := for_loops( 0 )
    return Int( n )
