/**
Tests Selection / Selector implementation.
*/

main() :
    strA := c"123456"

    scope:
        sel := Selection{UInt,UByte}( &strA, 1UI..2..9 )

        res1 := ~[10]UByte()
        iter := sel.sequencer()
        while iter.has_next():
            c := iter.next()
            res1.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res1 == [3]UByte( '2', '4', '6' )

        res2 := ~[10]UByte()
        for c in sel:
            res2.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res2 == [ '2', '4', '6' ]

    scope:
        res := ~[10]UByte()
        for c in Selection{UInt,UByte}( &strA, 0UI..2..9 ):
            res.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res == [ '1', '3', '5', 0 ]

    scope:
        res := ~[10]UByte()
        for c in Selection{UInt,UByte}( &strA, 0UI..1..8 ):
            res.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res == [ '1', '2', '3', '4', '5', '6', 0 ]

    scope:
        res := ~[10]UByte()
        for c in Selection{UInt,UByte}( &strA, 0UI..1..5 ):
            res.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res == [ '1', '2', '3', '4', '5' ]

    scope:
        res := ~[10]UByte()
        for c in Selection{UInt,UByte}( &strA, 5UI..-1..0 ):
            res.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res == [ '6', '5', '4', '3', '2' ]

    scope:
        res := ~[10]UByte()
        for c in Selection{UInt,UByte}( &strA, 6UI..-2..0 ):
            res.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res == [ 0, '5', '3' ]

    scope:
        res := ~[10]UByte()
        for c in Selection{UInt,UByte}( &strA, 6UI..-2..=0 ):
            res.add( c )
            ##t := [ c, '\0' ] ; tx.c.puts( t )
        assert res == [ 0, '5', '3', '1' ]
