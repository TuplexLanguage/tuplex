
overloaded_func(a : Int, b : Int)->Int :
    return a + b


overloaded_func(a : Float, b : Int)->Float :
    return a * Float( b )


#experr 1: overloaded_func(a : Float, b : Int)->Int : { return b; }  ## overload with duplicate function signature
#experr 1: overloaded_func : Int = 3;  ## overload with non-function type

#experr 1: non_func : Int = 4
#experr 1: non_func(a : Float, b : Int)->Int : { return b; }  ## overload with non-function field


type FooFuncType <: (a : Double, b : Double)->Double

other_func(a : Double, b : Double)->Double :
    r := a * b / 2.0
    return r



main()->Int :
    #experr 1: func_ref := overloaded_func

    result := overloaded_func( 3, 4 ) + Int( overloaded_func( 1.5, 10 ) )
    assert result == 22

    return 0



/*
    function ptr storages (internal):
    global
    static

    lambda obj storages:
    global
    static
    instance
    stack

    function "closure types":
    none
    instance
    lambda


    A declared function name is semantically always a function
    that holds its own closure (if any).
    I.e. it is a "lambda object".

    Function declarations that are
     - statically constant
     - direct-defined (i.e. closure = current scope)
    don't necessarily need to store a lambda object,
    the lambda object can be constructed implicitly upon access.

    Upon access of a field of function type,
    the "storage" of that function must be determined:
     - actual lambda object, or
     - merely a function pointer, to be combined with the
       base pointer which is the "self" closure pointer

    You can't take a reference to an implicit function/lambda
    since it has no storage. You can however assign it to a
    lambda object field (and then take a reference to that).


    myglobalF := func () { }

    type MyType :
        static mystaticF := func () { }

        static myvirtualF := func () { }

        myinlineinstanceF := func () { self.valid() }
        ## doesn't need actual storage in instance struct
        ## Q: can this be determined without the method sytx?

        myinstanceF := otherF
        ## does need actual storage in instance struct

        ~mymodinstanceF := func () { self.valid() }
        ## does need actual storage in instance struct


        static func mystaticF() { }

        func myinlineinstanceF() { self.valid() }


*/
