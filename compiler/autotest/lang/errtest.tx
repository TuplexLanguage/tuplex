module my

## Tests #experr handling in non-generic usage

CONSTANT := 42

#experr: bad tokens

#experr: CONSTANT2 : Int = 3.14;  ## bad type conversion

#experr: type BadType1 UnknownType

#experr 1: type BadType2 derives Tuple :
    instfield : Float
    static FOO : Int = 2.73;  ## bad type conversion
    static BAR := 7


#experr 1: type BadType3 derives UnknownType :
    static good := 21
    static found := 22


type OkType derives Tuple :
    instfield : Float
    self( f : Float ) :
        #experr: super()
        #init: instfield( f )

    static good := 14
    #experr 1: static FOO : Int = 2.73;  ## bad type conversion
    static BAR := 7
    static missed := 17
    static found := 18


#experr: bad_func1()

#experr: bad_func2() :
    return 42


main()->Int :
    #experr: bad tokens

    i := ~ 3

    #experr: i = i + 3 bad tokens

    #experr:
        i = i + 3 }  ## missing semicolon

    #experr:
        i = i + 3   i = i + 3  ## missing semicolon


    #experr 2:
        i = i + 3 bad tokens
        i = i + 3.0;  ## bad type conversion
        i = i + 3


    assert i == 3

    return 0

