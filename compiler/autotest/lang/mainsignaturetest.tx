## tests checking of correct main() signature

## wrong arguments:

#experr 1: main( errArgC : Int, args : &[]&[]UByte ) : { }

#experr 1: main( args : &[]&[]UByte, errArg : &[]&[]UByte ) : { }

#experr 1: main( args : &[]&[]Byte ) : { }

#experr 1: main( args : &[]&[]UInt ) : { }

#experr 1: main( args : &[]&[]Bool ) : { }

#experr 1: main( args : &[]&UByte ) : { }

#experr 1: main( args : &[]UByte ) : { }

#experr 1: main( args : &&UByte ) : { }

#experr 1: main( args : &UByte ) : { }

#experr 1: main( args : UByte ) : { }


## wrong return type:

module submod1
    #experr 1: main( args : &[]&[]UByte ) -> Bool : { return FALSE; }

module submod2
    #experr 1: main( args : &[]&[]UByte ) -> Float : { return 0.0; }

module submod3
    #experr 1: main( args : &[]&[]UByte ) -> &Int : { return new Int(); }

module submod4
    #experr 1: main( args : &[]&[]UByte ) -> [1]Int : { return \[ 0I ]; }


## correct signature:

module chosenmainsubmod
    main( args : &[]&[]UByte ) -> Int :
        assert args.L == 0
        return 0


/* Note: these are also correct signatures but implicitly tested in the other tests:
main( args : &[]&[]UByte )
main() -> Int
main()
*/
