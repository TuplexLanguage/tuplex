
type ~ GenBase{ T, V : UInt } :
    member : T

    self() :
        #init: member()


    self( memb : T ) :
        #init: member( memb )

    
    get_member() -> T :
        return self.member


    set_member( memb : T ) ~ :
        self.member = memb


    get_v() -> UInt :
        return self.V



ref_test( x : Int ) -> &GenBase :
    return new GenBase{Int,4}(x)


main() -> Int :
    type GBF3 <: GenBase{Float, 3}
    type GBF6 <: GenBase{Float, 6}
    type GBI3 <: GenBase{Int,3}

    a1 := GBF3()
    a2 := GBF6()
    a3 := GBI3()

    v1 := GBF3( 3.14 )
    v2 := GBF6( 9.9 )
    v3 := GBI3( 42 )

    assert v3.V == 3
    assert v3.GenBase#V == 3
    assert ref_test(42).V == 4
    assert ref_test(42).GenBase#V == 4

    return Int(0)

