
rem( dividend : Long, divisor : Long ) -> Long:
    return dividend - dividend / divisor * divisor

puts(cstr : &[]UByte, f : Long) :
    pstr : ~[cstr.L + 2]UByte = cstr
    pstr[pstr.L-1] = ' '
    pstr[pstr.L] = '0' + UByte( rem( f, 10 ) )
    pstr[pstr.L] = 0
    tx.c.puts( pstr )


type ~ AType derives Tuple :
    static SFIELD := 41
    static vm_field : ~Float = 3
    static vm_field2 : ~Float = 3
    static vm_field3 : ~Float = 3

    instance_field : ~Long
    instance_field2 : ~Long

    self() :
        #init: instance_field(1), instance_field2(1)

    print() :
        puts(c"AType", self.instance_field)

    static v_method(a : Int)->Int :
        #experr 1: self.instance_field = a  ## static methods can't access self / instance members
        return a * 2

    static v_method2(a : Int)->Int :
        return a * 2

    static v_func_field := (a : Int) -> Int: {
        #experr 1: self.instance_field = a;  ## static members can't access self / instance members
        return a*2;
    };

    ## overloaded method name:
    ## TODO: Support this. For now, error is generated.

    #experr: multimethod(a : Int)->Int :
        return Int( a * 3 )

    #experr: multimethod(a : Float)->Int :
        return Int( a * 3.5 )


type ~ BType derives AType :
    static override SFIELD := 42
    static override vm_field : ~Float = 4
    instance_field : ~Long = 6
    static override v_func_field := (a : Int) -> Int: return a*4; ;

    #experr 1: vm_field2 : ~Float = 4                       ## non-static though parent field is static
    #experr 1: static vm_field3 : ~Float = 4                ## missing 'override'
    #experr 1: static instance_field2 : ~Long = 100         ## 'static' though parent field is non-static
    #experr 1: override err_o_field1 : ~Long = 100          ## override on fields only if also static
    #experr 1: static override err_o_field2 : ~Long = 100   ## override on field though no parent field to override

##    self() :
##        #init: instance_field(3)

    override print() :
        puts(c"BType", self.instance_field)

    static override v_method(a : Int)->Int :
        return Super.v_method( a ) * 2

    #experr 1: override v_method2(a : Int)->Int :  ## overrides static method but doesn't declare static
        return Super.v_method2( a ) * 2

    #experr 1: override bad_method() {}  ## no such parent method

    b_method() : {}

    ## overriding overloaded method (in reverse order):
    ## TODO: Support this.
    /*
    override multimethod(a : Float)->Int :
        return super.multimethod( a ) * 2

    override multimethod(a : Int)->Int :
        return super.multimethod( a ) * 3

    #experr: static override multimethod : Bool
    */


main()->Int :
    bo := ~BType()
    ar : &~AType = &bo
    br : &~BType = &bo

    assert ar.SFIELD == 42
    assert br.SFIELD == 42
    assert bo.SFIELD == 42
    assert AType.SFIELD == 41
    assert BType.SFIELD == 42

    assert ar.vm_field == 4
    assert br.vm_field == 4
    assert bo.vm_field == 4
    assert AType.vm_field == 3
    assert BType.vm_field == 4

    ar.instance_field = 10
    br.instance_field = 20
    assert ar.instance_field == 10
    assert br.instance_field == 20
    assert bo.instance_field == 20

    ar.instance_field = 40
    br.instance_field = 80
    assert ar.instance_field == 40
    assert br.instance_field == 80
    assert bo.instance_field == 80

    br.b_method()
    #experr: ar.b_method()

    ## methods are always "static":
    ar.instance_field = 4
    br.instance_field = 8
    ##ar.print()
    ##br.print()
    vala := ar.v_method( 2 )
    assert vala == 8
    valb := br.v_method( 2 )
    assert valb == 8
/*
    val := ar.multimethod( 4.0 )
    assert val == 28
    val := ar.multimethod( 4 )
    assert val == 36
*/
    return 0

