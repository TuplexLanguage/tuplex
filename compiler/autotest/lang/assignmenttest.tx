
interface Face { }

type ~ Body <: Tuple, Face :
    member : Int
    self( m : Int ) :
        self.member = m


    override equals( o : &Any )->Bool :
        if o is b : &Body :
            return self.member == b.member
        return FALSE



assign_objs( v : Int ) :
    b0 := Body( v )
    b1 := ~Body( v+1 )
    assert _address(&b0) != _address(&b1)
    assert b0 != b1

    b1 = b0
    assert b0 == b1



/** Cannot be invoked with destination that isn't exactly a ~&Any */
assign_refs( rDst : &~&Any, rSrc : &&Any ) :
    rDst^ = rSrc^



assign_ref_targets( rDst : &~Any, rSrc : &Any ) :
    ## can't assign when types not statically known
    #experr 1: rDst^ = rSrc^;  ## not concrete




sum( arr : &[]UByte )->Int :
    s : ~Int = 0
    for i := ~0; i < arr.L; i = i + 1 :
        s = s + arr[i]
    return s



/** arr is expected to have length 3 */
assign_dyn( arr : &[]UByte ) :
  ## test initializations with value-copy:
    if arr.L <= 2 :
        a0 : [2]UByte = arr^
    if arr.L <= 3 :
        a1 : [3]UByte = arr^
    if arr.L <= 4 :
        a2 : [4]UByte = arr^
    ## FUTURE: support sub-sequence production and assignment, e.g:  a : [3]UByte = arr^[0..2]

  ## test assignments:
    a10 : ~[2]UByte
    assert a10.L == 0
    a11 : ~[3]UByte
    assert a11.L == 0
    a12 : ~[4]UByte
    assert a11.L == 0

    if arr.L <= 2 :
        a10 = arr^
    if arr.L <= 3 :
        a11 = arr^
    if arr.L <= 4 :
        a12 = arr^



main()->Int :
  ## Ref assignments
    xb : Byte = 42
    xi : Int = 42
    numR : ~&Integer = xb
    assert _address(numR) == _address(&xb)
    assert _address(numR) != _address(&xi)
    numR = xi
    assert _address(numR) != _address(&xb)
    assert _address(numR) == _address(&xi)

    mi : ~Int = 17
    assign_ref_targets( &mi, &xb );  ## ok to invoke, though it can't perform operation


  ## Array assignments
    a0 : [3]UByte = [ 0, 1, 2 ];  ## initialization/binding, not assignment/copy
    assert sum( a0 ) == 3

    a1 : ~[3]UByte = a0
    assert _address(&a0) != _address(&a1)
    assert sum( a1 ) == 3
    assert a1 == a0

    a1 = [ 1, 2, 3 ]
    assert sum( a1 ) == 6
    assert a1 != a0

    assign_dyn( [ 2, 3, 4 ] )


  ## Tuple assignments:
    assign_objs( 1 )

  ## can't assign to type:
    #experr 2: Int = 3

    return 0

