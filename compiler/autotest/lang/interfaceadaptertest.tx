## interface adapter tests (including interface adapter modifiability)

interface TopIf :
    abstract get_value()->Int


## 'tagging' interface that won't be derived from in first position
interface TagIf :
    get_tag()->Int:
        return 501


interface IntfA <: TopIf, TagIf :
    ## "mixin" or default-implementation interface methods:
    mixin_method_1()->Int : { return 1; }
    mixin_method_2()->Int : { return 2; }


interface IntfB <: TopIf :
    abstract set_value( v : Int ) ~


type ~ Type <: Tuple, IntfA, IntfB :
    fld : ~Int

    override get_value()->Int :
        return self.fld

    override set_value( v : Int ) ~ :
        self.fld = v

    override mixin_method_2()->Int :
        return 3


type ~ ImplA <: Tuple, IntfA :
    override get_value()->Int :
        return 42


type ~ ImplB <: Tuple, IntfB :
    fld : ~Int
    override get_value()->Int :
        return self.fld;
    override set_value( v : Int ) ~ :
        self.fld = v


mixin_tests() :
    t := ~ Type(42)
    r : &IntfA = &t
    s : &~IntfB = &t
    assert t.get_value() == 42
    assert r.get_value() == 42
    t.set_value(112)
    assert t.get_value() == 112
    assert r.get_value() == 112
    s.set_value(117)
    assert t.get_value() == 117
    assert r.get_value() == 117

    assert r.mixin_method_1() == 1
    assert t.mixin_method_1() == 1
    assert r.mixin_method_2() == 3
    assert t.mixin_method_2() == 3


test_tag( t : &TagIf ):
    assert t.get_tag() == 501

test_top( o : &TopIf, expected : Int ):
    assert o.get_value() == expected


ref_assign( a : &IntfA, b : &IntfB ):
    ## implicit conversion from interface-ref to a primary-path supertype interface-ref:
    test_top( a, 42 )
    test_top( b, 200 )

    ## can't do implicit conversion from interface-ref to a non-primary-path supertype interface-ref:
    #experr 1: test_tag( a )

    assert isa( a, _typeid{ IntfA } )
    assert isa( b, _typeid{ IntfB } )
    x : &Any = a
    y : &Any = b
    assert isa( x, _typeid{ IntfA } )
    assert isa( y, _typeid{ IntfB } )
    if a is at : &ImplA:
        assert _typeid( at ) == _typeid{ ImplA }
        assert at.get_value() == 42;
    else:
        assert FALSE
    if b is bt : &ImplB:
        assert _typeid( bt ) == _typeid{ ImplB }
        assert bt.get_value() == 200;
    else:
        assert FALSE
    if x is xt : &ImplA:
        assert _typeid( xt ) == _typeid{ ImplA }
        assert xt.get_value() == 42;
    else:
        assert FALSE
    assert isa( a, _typeid{IntfA} )
    assert isa( a, _typeid{ImplA} )
    assert isa( a, _typeid{Any} )


main()->Int :
    mixin_tests()

    iA := ImplA()
    iB := ImplB(200)
    test_tag( iA )
    ref_assign( iA, iB )
    return 0
