module tx


/** A sequenceable object supports step-wise single direction traversal of its contained elements.
 */
interface Sequenceable{ E } derives Interface :

    abstract sequencer() -> Ref{ ~Sequencer{ E } }


/** An iterable sequence supports step-wise forward and backward traversal.
 */
interface Iterable{ E } derives Sequenceable{ E } :

    abstract override sequencer() -> Ref{ ~Iterator{ E } }


/** An indicable sequence is finite and supports random-access.
 * Sequences, sets, and maps are Indicable.
 */
interface Indicable{ K, E } derives Iterable{ E } :

    abstract count() -> ULong

    abstract has( key : K ) -> Bool

    abstract get( key : K ) -> E


/** A modifiable Indicable. */
interface Updatable{ K, E } derives Indicable{ K, E } :

    abstract updater() ~ -> Ref{ ~Updater{ E } }

    /** Sets the element at the slot identified by key. Returns the replaced element. */
    abstract set( key : K, element : E ) ~ -> E

    /** Swaps two elements, putting each in the slot previously occupied by the other. */
    abstract swap( keyA : K, keyB : K ) ~


interface Sequencer{ E } :

    abstract has_next() -> Bool

    abstract next() ~ -> E


interface Iterator{ E } derives Sequencer{ E } :

    abstract has_prev() -> Bool

    abstract prev() ~ -> E


interface Updater{ E } derives Iterator{ E } :

    /** Replaces the value returned by the most-recent call to next() / prev(). Returns the replaced element. */
    abstract set( element : E ) ~ -> E
