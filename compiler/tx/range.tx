module tx


interface Range{ E } <: Indicable{ ULong, E }, Collection{ E } :
    ## FUTURE: inherit Map{ ULong, E } instead?

    abstract override sequencer() -> Ref{ ~Iterator{E} }

    abstract override count() -> ULong

    abstract override has( key : ULong ) -> Bool

    abstract override get( key : ULong ) -> E



/** A range between two values of an Enumerable type.
 * A range "provides" a subset of the values of the Enumerable type, in natural order,
 * ascending or descending, contiguously or with a fixed "stride".
 * This subset may be empty. It may also encompass the full set of values of the Enumerable type.
 * An ERange instance is immutable.
 * An ERange can also be viewed as a mapping between a contiguous interval of integer indexes, starting from 0,
 * to a (possibly non-contiguous) sequence of values of the Enumerable type.
 */
type ERange{ E derives Enumerable } <: Tuple, Range{ E } :

    /** The ERange iterator. */
    type ~ ERangeIterator <: Tuple, Iterator{ E } :
        _range   : &ERange{E}
        _nextIndex : ~ULong = 0

        override has_next() -> Bool :
            return self._nextIndex < self._range._indexLimit

        override has_prev() -> Bool :
            return self._nextIndex > 0

        override next()~ -> E :
            if self._nextIndex >= self._range.count():
                panic( "No next() element in ERangeIterator" )
            ix := self._nextIndex
            self._nextIndex = ix + 1
            return self._range._get_abs_ix( ix )

        override prev()~ -> E :
            if self._nextIndex <= 0:
                panic( "No prev() element in ERangeIterator" )
            self._nextIndex = self._nextIndex - 1
            return self._range._get_abs_ix( self._nextIndex )


    ## valid indices are all integers between [ 0, _indexLimit )
    _indexLimit : ULong

    start : E
    limit : E
    stride : Long

    /** Constructs a conventional, ascending range [ start, limit ) with stride 1. */
    self( start : E, limit : E ) :
        minIndex : ~ULong = start.ordinal()
        if limit.ordinal() < minIndex:
            minIndex = limit.ordinal()
        indexLimit : ~ULong = limit.ordinal() - minIndex
        #init: _indexLimit( indexLimit ), start( start ), limit( limit ), stride( 1 )

    /** Constructs a range [ start, limit ) with the specified stride if inclusive is FALSE,
     *   or a range [ start, limit ] with the specified stride if inclusive is TRUE. */
    self( start : E, limit : E, stride : Long, inclusive : Bool ) :
        if stride == 0:
            panic ( "Zero stride in ERange" )
        minIndex : ~ULong = start.ordinal()
        if limit.ordinal() < minIndex:
            minIndex = limit.ordinal()
        indexLimit : ~ULong = 0
        if stride > 0:
            indexLimit = ( ULong( inclusive & limit.ordinal() >= start.ordinal() )
                           + ( limit.ordinal() - minIndex + ULong(stride) - 1 ) / ULong(stride) )
        else:  ## stride < 0
            indexLimit = ( ULong( inclusive & start.ordinal() >= limit.ordinal() )
                           + ( start.ordinal() - minIndex + ULong(-stride) - 1 ) / ULong(-stride) )
        #init: _indexLimit( indexLimit ), start( start ), limit( limit ), stride( stride )

    /** Constructs a range [ start, limit ) with the specified stride. */
    self( start : E, limit : E, stride : Long ) :
        #self( start, limit, stride, FALSE )

    override sequencer() -> Ref{ ~Iterator{E} } :
        return new ~ERangeIterator( self )

    rev_sequencer() -> Ref{ ~Iterator{E} } :
        iter := new ~ERangeIterator( self )
        iter._nextIndex = self._indexLimit
        return iter

    /** Returns true if this range is empty. */
    override empty() -> Bool :
        return self._indexLimit == 0

    /** Returns the number of elements provided by this range, same as count(). */
    override capacity() -> ULong :
        return self.count()

    /** Returns the number of elements provided by this range. */
    override count() -> ULong :
        return self._indexLimit

    /** Returns true if this range contains (provides) the specified value.
     * Note that for non-contiguous ranges, only the values actually provided by this range are "contained". */
    override contains( val : E ) -> Bool :
        ord := val.ordinal()
        if self.stride >= 0:
            if ord < self.start.ordinal():
                return FALSE
            dist := ord - self.start.ordinal()
            steps := dist / ULong( self.stride )
            if steps >= self._indexLimit:
                return FALSE
            rem := dist - steps * ULong( self.stride )
            return rem == 0
        else:
            if ord > self.start.ordinal():
                return FALSE
            dist := self.start.ordinal() - ord
            steps := dist / ULong( -self.stride )
            if steps >= self._indexLimit:
                return FALSE
            rem := dist - steps * ULong( -self.stride )
            return rem == 0

    /** Returns true if this range has the specified index. */
    override has( index : ULong ) -> Bool :
        return ULong(index) < self._indexLimit

    /** Returns the range value at the specified index. */
    override get( index : ULong ) -> E :
        if ULong( index ) >= self._indexLimit:
            panic "Invalid range index: " %d index %% " >= " %d self._indexLimit
        return self._get_abs_ix( ULong( index ) )

    ## FUTURE: When overloading of static methods supported, let these override has() and get()

    /** Returns true if this range has the specified index. If index is negative, it is relative to range's end. */
    has_( index : Long ) -> Bool :
        if index < 0:
            return ULong(-index) <= self._indexLimit
        else
            return ULong(index) < self._indexLimit

    /** Returns the range value at the specified index. If index is negative, it is relative to range's end. */
    get_( index : Long ) -> E :
        if index < 0 :
            if ULong( -index ) > self._indexLimit :
                panic "Invalid range index: " %d index %% " < -" %d self._indexLimit
            return self._get_abs_ix( self._indexLimit - ULong( -index ) )
        else
            if ULong( index ) >= self._indexLimit:
                panic "Invalid range index: " %d index %% " >= " %d self._indexLimit
            return self._get_abs_ix( ULong( index ) )

    _get_abs_ix( absIx : ULong ) -> E :
        if self.stride >= 0:
            return E.value( self.start.ordinal() + absIx * ULong( self.stride ) )
        else:
            return E.value( self.start.ordinal() - absIx * ULong( -self.stride ) )

    /** Returns TRUE if this is an ascending range (from lower ordinal to higher). */
    is_ascending() -> Bool :
        return self.stride > 0

    /** Returns TRUE if this range is inclusive of its end limit. */
    is_inclusive() -> Bool :
        minIndex : ~ULong = self.start.ordinal()
        if self.limit.ordinal() < minIndex:
            minIndex = self.limit.ordinal()
        if self.stride > 0:
            stri := ULong(self.stride)
            diff := self._indexLimit - ( self.limit.ordinal() - minIndex + stri - 1 ) / stri
            return Bool( diff )
        else:  ## stride < 0
            stri := ULong(-self.stride)
            diff := self._indexLimit - ( self.start.ordinal() - minIndex + stri - 1 ) / stri
            return Bool( diff )
