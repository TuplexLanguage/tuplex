module tx


print_if_uint( str : String, ref : &Any ):
    if ref is uintRef : &UInt:
        print( str %% " uint=" %d uintRef )

type ~Selector{ K, E } <: Tuple, Sequencer{ E } :
    _indicable : &Indicable{K,E}
    _filter : &~Sequencer{K}
    _nextKey : ~Opt{K}

    self( indicable : &Indicable{K,E}, filter : &Sequenceable{K} ):
        fs := filter.sequencer()
        if fs.has_next():
            #init: _indicable( indicable ), _filter( fs ), _nextKey( fs.next() )
        else:
            #init: _indicable( indicable ), _filter( fs ), _nextKey()

    override has_next() -> Bool:
        if self._nextKey.has():
            return self._indicable.has( self._nextKey.get() )
        else:
            return FALSE

    override next() ~ -> E:
        nextKey := self._nextKey.get()
        ##print_if_uint( "Selector.next() nextKey=", nextKey )
        if self._filter.has_next():
            self._nextKey.set( self._filter.next() )
        else:
            self._nextKey.clear()
        return self._indicable.get( nextKey )


type Selection{ K, E } <: Tuple, Sequenceable{ E } :
    _indicable : &Indicable{K,E}
    _filter : &Sequenceable{K}

    self( indicable : &Indicable{K,E}, filter : &Sequenceable{K} ):
        #init: _indicable( indicable ), _filter( filter )

    override sequencer() -> Ref{ ~Sequencer{ E } }:
        return new ~Selector{K,E}( self._indicable, self._filter )
