


* Type naming and declaration

All types could have names:
 - explicitly named user types
 - explicitly named built-in types
 - implicitly named types that are generated by type expressions

If all the name components of the implicitly named types' constructed names are fully qualified,
the implicitly named types should be identical if and only if the constructed names are identical.

An "empty type specialization" (i.e. a type alias) shall define a type distinct from its base type
when it is a user-defined type (i.e. explicitly named).

Quasi-explicitly named types are generic type parameters and bindings.
They are not regarded as implicitly generated.
They will always (?) be an alias (empty specialization) for either:
 - a type explicitly declared elsewhere
 - an implicitly named type generated by a type expression



Question: Can we avoid (and do we want to avoid) implicitly named, empty type specializations?

Probably yes, given that all types except tx.Any are derived from a base type, and extend the base type
in exactly one of these ways:
 A) empty
 B) modifiable (prepend with ~)
 C) bind type parameters (append with < 'type names' >)
 D) define a function signature

A) can only be explicitly named types (including generic params and bindings).

B) and C) are automatically declared in their base type's name space and intended to be reused
to avoid duplication of identical types. They are thus implicitly declared and predictably named.
